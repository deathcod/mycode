first day
--------

* When a Python file is run directly, the special variable "__name__" is set to "__main__".

* In the code comment, we hinted that * works faster than +, the reason being that * calculates the size of the resulting object once whereas with +, that calculation is made each time + is called. Both + and * are called "overloaded" operators because they mean different things for numbers vs. for strings (and other data types).

Difference between module and function

So you remember back on your text books where on the content page the chapters were divided in modules.
So there lies the concept different chapters which have the same objective or the part of same theory then these parts are clustered together and know as module.
Similarly, in programming, when different functions are clustered together they are seperated and named as module.

use case of help() and dir()
>>> dir(list)
['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', '__delslice__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getslice__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__setslice__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']


Its a short representation help..

help(list)
its the complete list...!!


6//5 = 1 but this is recommend
 6/5 = 1

"%s hell %s" % ("Fuck","hard")


[1,2] + [3,4]
helps to append.

Please do research on the memory usage of tuple and list.

difference between a.sort() and sorted().
	* In sorted a new list is created where as in the a.sort sorting is performed on the original list.
	* key is a proxy which is give such that values can be sorted accordingly.


Tuples are like lists, except they are immutable and do not change size (tuples are not strictly immutable since one of the contained elements could be mutable).

freq = {}
for (num, count) in freq.items():
	_________
	_________

for i in freq.values():
	_________
	_________

